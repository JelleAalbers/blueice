"""Yields information

This defines [er|nr]_[photon|electron]_yield functions which give
the [photon|electron] yield per energy in [pe|electrons]/keV.
Each function also requires the config dictionary (same as Model.config).

This is cobbled together from various sources: see the comments below.

Limitations:
 - The field strength is currently fixed at 500 V/cm; I need to curve trace some more plots to support other fields...
"""
from pax import units
from scipy.interpolate import interp1d
import numpy as np

fixed_field = 500 * units.V/units.cm


def check_field(config):
    if config['drift_field'] != fixed_field:
        raise ValueError("Only a drift field of %s is currently supported" % (
            config['drift_field'] / (units.V/units.cm)))


class InterpolateAndExtrapolate1D(object):
    """Extends scipy.interpolate.interp1d to do constant extrapolation outside of the data range
    """
    def __init__(self, points, values):
        points = np.asarray(points)
        self.interpolator = interp1d(points, values)
        self.min = points.min()
        self.max = points.max()

    def __call__(self, points):
        try:
            points[0]
        except TypeError:
            points = np.array([points])
        points = np.clip(points, self.min, self.max)
        return self.interpolator(points)


"""
Electronic recoils

In NEST the electronic recoil yield is calculated separately for each event,
based on details of the GEANT4 track structure (in particular the linear energy transfer).
Here I use an approximation, which is the "old approach" from the MC group, see
    xenon:xenon1t:sim:notes:marco:t2-script-description#generation_of_light_and_charge

A fixed number of quanta is assumed to be generated.
We grab the photon yield per keV at 500 V/cm from NEST's figure of average yields
(histogram ripped thanks to Bart's HistogramRipper).
The rest of the quanta are assumed to turn into electrons.
"""
_recoil_energies = np.array([5.500e-02, 5.615e-02, 5.733e-02, 5.853e-02, 5.976e-02, 6.101e-02, 6.229e-02, 6.360e-02, 6.493e-02, 6.629e-02, 6.768e-02, 6.910e-02, 7.055e-02, 7.202e-02, 7.353e-02, 7.508e-02, 7.665e-02, 7.826e-02, 7.990e-02, 8.157e-02, 8.328e-02, 8.503e-02, 8.681e-02, 8.863e-02, 9.049e-02, 9.238e-02, 9.432e-02, 9.630e-02, 9.831e-02, 1.004e-01, 1.025e-01, 1.046e-01, 1.068e-01, 1.091e-01, 1.113e-01, 1.137e-01, 1.161e-01, 1.185e-01, 1.210e-01, 1.235e-01, 1.261e-01, 1.287e-01, 1.314e-01, 1.342e-01, 1.370e-01, 1.399e-01, 1.428e-01, 1.458e-01, 1.489e-01, 1.520e-01, 1.552e-01, 1.584e-01, 1.617e-01, 1.651e-01, 1.686e-01, 1.721e-01, 1.757e-01, 1.794e-01, 1.832e-01, 1.870e-01, 1.909e-01, 1.949e-01, 1.990e-01, 2.032e-01, 2.075e-01, 2.118e-01, 2.163e-01, 2.208e-01, 2.254e-01, 2.301e-01, 2.350e-01, 2.399e-01, 2.449e-01, 2.500e-01, 2.553e-01, 2.606e-01, 2.661e-01, 2.717e-01, 2.774e-01, 2.832e-01, 2.891e-01, 2.952e-01, 3.014e-01, 3.077e-01, 3.141e-01, 3.207e-01, 3.274e-01, 3.343e-01, 3.413e-01, 3.485e-01, 3.558e-01, 3.632e-01, 3.708e-01, 3.786e-01, 3.866e-01, 3.947e-01, 4.029e-01, 4.114e-01, 4.200e-01, 4.288e-01, 4.378e-01, 4.470e-01, 4.563e-01, 4.659e-01, 4.757e-01, 4.856e-01, 4.958e-01, 5.062e-01, 5.168e-01, 5.276e-01, 5.387e-01, 5.500e-01, 5.615e-01, 5.733e-01, 5.853e-01, 5.976e-01, 6.101e-01, 6.229e-01, 6.360e-01, 6.493e-01, 6.629e-01, 6.768e-01, 6.910e-01, 7.055e-01, 7.202e-01, 7.353e-01, 7.508e-01, 7.665e-01, 7.826e-01, 7.990e-01, 8.157e-01, 8.328e-01, 8.503e-01, 8.681e-01, 8.863e-01, 9.049e-01, 9.238e-01, 9.432e-01, 9.630e-01, 9.831e-01, 1.004e+00, 1.025e+00, 1.046e+00, 1.068e+00, 1.091e+00, 1.113e+00, 1.137e+00, 1.161e+00, 1.185e+00, 1.210e+00, 1.235e+00, 1.261e+00, 1.287e+00, 1.314e+00, 1.342e+00, 1.370e+00, 1.399e+00, 1.428e+00, 1.458e+00, 1.489e+00, 1.520e+00, 1.552e+00, 1.584e+00, 1.617e+00, 1.651e+00, 1.686e+00, 1.721e+00, 1.757e+00, 1.794e+00, 1.832e+00, 1.870e+00, 1.909e+00, 1.949e+00, 1.990e+00, 2.032e+00, 2.075e+00, 2.118e+00, 2.163e+00, 2.208e+00, 2.254e+00, 2.301e+00, 2.350e+00, 2.399e+00, 2.449e+00, 2.500e+00, 2.553e+00, 2.606e+00, 2.661e+00, 2.717e+00, 2.774e+00, 2.832e+00, 2.891e+00, 2.952e+00, 3.014e+00, 3.077e+00, 3.141e+00, 3.207e+00, 3.274e+00, 3.343e+00, 3.413e+00, 3.485e+00, 3.558e+00, 3.632e+00, 3.708e+00, 3.786e+00, 3.866e+00, 3.947e+00, 4.029e+00, 4.114e+00, 4.200e+00, 4.288e+00, 4.378e+00, 4.470e+00, 4.563e+00, 4.659e+00, 4.757e+00, 4.856e+00, 4.958e+00, 5.062e+00, 5.168e+00, 5.276e+00, 5.387e+00, 5.500e+00, 5.615e+00, 5.733e+00, 5.853e+00, 5.976e+00, 6.101e+00, 6.229e+00, 6.360e+00, 6.493e+00, 6.629e+00, 6.768e+00, 6.910e+00, 7.055e+00, 7.202e+00, 7.353e+00, 7.508e+00, 7.665e+00, 7.826e+00, 7.990e+00, 8.157e+00, 8.328e+00, 8.503e+00, 8.681e+00, 8.863e+00, 9.049e+00, 9.238e+00, 9.432e+00, 9.630e+00, 9.831e+00, 1.004e+01, 1.025e+01, 1.046e+01, 1.068e+01, 1.091e+01, 1.113e+01, 1.137e+01, 1.161e+01, 1.185e+01, 1.210e+01, 1.235e+01, 1.261e+01, 1.287e+01, 1.314e+01, 1.342e+01, 1.370e+01, 1.399e+01, 1.428e+01, 1.458e+01, 1.489e+01, 1.520e+01, 1.552e+01, 1.584e+01, 1.617e+01, 1.651e+01, 1.686e+01, 1.721e+01, 1.757e+01, 1.794e+01, 1.832e+01, 1.870e+01, 1.909e+01, 1.949e+01, 1.990e+01, 2.032e+01, 2.075e+01, 2.118e+01, 2.163e+01, 2.208e+01, 2.254e+01, 2.301e+01, 2.350e+01, 2.399e+01, 2.449e+01, 2.500e+01, 2.553e+01, 2.606e+01, 2.661e+01, 2.717e+01, 2.774e+01, 2.832e+01, 2.891e+01, 2.952e+01, 3.014e+01, 3.077e+01, 3.141e+01, 3.207e+01, 3.274e+01, 3.343e+01, 3.413e+01, 3.485e+01, 3.558e+01, 3.632e+01, 3.708e+01, 3.786e+01, 3.866e+01, 3.947e+01, 4.029e+01, 4.114e+01, 4.200e+01, 4.288e+01, 4.378e+01, 4.470e+01, 4.563e+01, 4.659e+01, 4.757e+01, 4.856e+01, 4.958e+01, 5.062e+01, 5.168e+01, 5.276e+01, 5.387e+01, 5.500e+01, 5.615e+01, 5.733e+01, 5.853e+01, 5.976e+01, 6.101e+01, 6.229e+01, 6.360e+01, 6.493e+01, 6.629e+01, 6.768e+01, 6.910e+01, 7.055e+01, 7.202e+01, 7.353e+01, 7.508e+01, 7.665e+01, 7.826e+01, 7.990e+01, 8.157e+01, 8.328e+01, 8.503e+01, 8.681e+01, 8.863e+01, 9.049e+01, 9.238e+01, 9.432e+01, 9.630e+01, 9.831e+01, 1.004e+02, 1.025e+02, 1.046e+02, 1.068e+02, 1.091e+02, 1.113e+02, 1.137e+02, 1.161e+02, 1.185e+02, 1.210e+02, 1.235e+02, 1.261e+02, 1.287e+02, 1.314e+02, 1.342e+02, 1.370e+02, 1.399e+02, 1.428e+02, 1.458e+02, 1.489e+02, 1.520e+02, 1.552e+02, 1.584e+02, 1.617e+02, 1.651e+02, 1.686e+02, 1.721e+02, 1.757e+02, 1.794e+02, 1.832e+02, 1.870e+02, 1.909e+02, 1.949e+02, 1.990e+02, 2.032e+02, 2.075e+02, 2.118e+02, 2.163e+02, 2.208e+02, 2.254e+02, 2.301e+02, 2.350e+02, 2.399e+02, 2.449e+02, 2.500e+02, 2.553e+02, 2.606e+02, 2.661e+02, 2.717e+02, 2.774e+02, 2.832e+02, 2.891e+02, 2.952e+02, 3.014e+02, 3.077e+02, 3.141e+02, 3.207e+02, 3.274e+02, 3.343e+02, 3.413e+02, 3.485e+02, 3.558e+02, 3.632e+02, 3.708e+02, 3.786e+02, 3.866e+02, 3.947e+02, 4.029e+02, 4.114e+02, 4.200e+02, 4.288e+02, 4.378e+02, 4.470e+02, 4.563e+02, 4.659e+02, 4.757e+02, 4.856e+02, 4.958e+02, 5.062e+02, 5.168e+02, 5.276e+02, 5.387e+02, 5.500e+02, 5.615e+02, 5.733e+02, 5.853e+02, 5.976e+02, 6.101e+02, 6.229e+02, 6.360e+02, 6.493e+02, 6.629e+02, 6.768e+02, 6.910e+02, 7.055e+02, 7.202e+02, 7.353e+02, 7.508e+02, 7.665e+02, 7.826e+02, 7.990e+02, 8.157e+02, 8.328e+02, 8.503e+02, 8.681e+02, 8.863e+02, 9.049e+02, 9.238e+02, 9.432e+02, 9.630e+02, 9.831e+02, 1.004e+03, 1.025e+03, 1.046e+03, 1.068e+03, 1.091e+03, 1.113e+03, 1.137e+03, 1.161e+03, 1.185e+03, 1.210e+03, 1.235e+03, 1.261e+03, 1.287e+03, 1.314e+03, 1.342e+03, 1.370e+03, 1.399e+03, 1.428e+03, 1.458e+03, 1.489e+03, 1.520e+03, 1.552e+03, 1.584e+03, 1.617e+03, 1.651e+03, 1.686e+03, 1.721e+03, 1.757e+03, 1.794e+03, 1.832e+03, 1.870e+03, 1.909e+03, 1.949e+03, 1.990e+03, 2.032e+03, 2.075e+03, 2.118e+03, 2.163e+03, 2.208e+03, 2.254e+03, 2.301e+03, 2.350e+03, 2.399e+03, 2.449e+03, 2.500e+03, 2.553e+03, 2.606e+03, 2.661e+03, 2.717e+03, 2.774e+03, 2.832e+03, 2.891e+03, 2.952e+03, 3.014e+03, 3.077e+03, 3.141e+03, 3.207e+03, 3.274e+03, 3.343e+03, 3.413e+03, 3.485e+03, 3.558e+03, 3.632e+03, 3.708e+03, 3.786e+03, 3.866e+03, 3.947e+03, 4.029e+03, 4.114e+03, 4.200e+03, 4.288e+03, 4.378e+03, 4.470e+03, 4.563e+03, 4.659e+03, 4.757e+03, 4.856e+03, 4.958e+03, 5.062e+03, 5.168e+03, 5.276e+03, 5.387e+03, 5.500e+03])   # noqa
_photon_yields = np.array([0.000e+00, 5.889e+00, 5.889e+00, 6.079e+00, 6.079e+00, 6.174e+00, 6.269e+00, 6.269e+00, 6.459e+00, 6.459e+00, 6.554e+00, 6.649e+00, 6.744e+00, 6.839e+00, 6.839e+00, 6.934e+00, 7.029e+00, 7.124e+00, 7.219e+00, 7.219e+00, 7.314e+00, 7.409e+00, 7.504e+00, 7.599e+00, 7.599e+00, 7.694e+00, 7.789e+00, 7.884e+00, 7.979e+00, 8.074e+00, 8.074e+00, 8.169e+00, 8.264e+00, 8.264e+00, 8.454e+00, 8.454e+00, 8.549e+00, 8.644e+00, 8.644e+00, 8.834e+00, 8.834e+00, 9.024e+00, 9.024e+00, 9.024e+00, 9.214e+00, 9.214e+00, 9.404e+00, 9.404e+00, 9.404e+00, 9.594e+00, 9.594e+00, 9.784e+00, 9.784e+00, 9.784e+00, 9.974e+00, 9.974e+00, 1.016e+01, 1.016e+01, 1.026e+01, 1.035e+01, 1.035e+01, 1.045e+01, 1.054e+01, 1.064e+01, 1.073e+01, 1.073e+01, 1.083e+01, 1.092e+01, 1.102e+01, 1.111e+01, 1.121e+01, 1.121e+01, 1.130e+01, 1.140e+01, 1.149e+01, 1.159e+01, 1.159e+01, 1.168e+01, 1.178e+01, 1.187e+01, 1.197e+01, 1.197e+01, 1.216e+01, 1.216e+01, 1.225e+01, 1.235e+01, 1.235e+01, 1.254e+01, 1.254e+01, 1.254e+01, 1.273e+01, 1.273e+01, 1.292e+01, 1.292e+01, 1.292e+01, 1.311e+01, 1.311e+01, 1.330e+01, 1.330e+01, 1.339e+01, 1.349e+01, 1.349e+01, 1.368e+01, 1.368e+01, 1.377e+01, 1.387e+01, 1.387e+01, 1.406e+01, 1.406e+01, 1.415e+01, 1.425e+01, 1.434e+01, 1.444e+01, 1.444e+01, 1.463e+01, 1.463e+01, 1.472e+01, 1.482e+01, 1.482e+01, 1.501e+01, 1.501e+01, 1.510e+01, 1.520e+01, 1.520e+01, 1.539e+01, 1.539e+01, 1.548e+01, 1.558e+01, 1.567e+01, 1.577e+01, 1.577e+01, 1.596e+01, 1.596e+01, 1.605e+01, 1.615e+01, 1.615e+01, 1.634e+01, 1.634e+01, 1.653e+01, 1.672e+01, 1.691e+01, 1.710e+01, 1.729e+01, 1.748e+01, 1.767e+01, 1.795e+01, 1.814e+01, 1.833e+01, 1.852e+01, 1.871e+01, 1.900e+01, 1.919e+01, 1.938e+01, 1.966e+01, 1.995e+01, 2.014e+01, 2.033e+01, 2.052e+01, 2.090e+01, 2.109e+01, 2.128e+01, 2.156e+01, 2.185e+01, 2.204e+01, 2.232e+01, 2.261e+01, 2.280e+01, 2.308e+01, 2.337e+01, 2.356e+01, 2.384e+01, 2.413e+01, 2.441e+01, 2.460e+01, 2.498e+01, 2.517e+01, 2.555e+01, 2.574e+01, 2.603e+01, 2.631e+01, 2.669e+01, 2.688e+01, 2.726e+01, 2.745e+01, 2.783e+01, 2.802e+01, 2.840e+01, 2.859e+01, 2.897e+01, 2.926e+01, 2.954e+01, 2.992e+01, 3.011e+01, 3.049e+01, 3.078e+01, 3.106e+01, 3.135e+01, 3.173e+01, 3.201e+01, 3.230e+01, 3.258e+01, 3.296e+01, 3.325e+01, 3.353e+01, 3.382e+01, 3.420e+01, 3.448e+01, 3.477e+01, 3.505e+01, 3.543e+01, 3.572e+01, 3.600e+01, 3.638e+01, 3.666e+01, 3.695e+01, 3.733e+01, 3.761e+01, 3.790e+01, 3.818e+01, 3.856e+01, 3.885e+01, 3.913e+01, 3.942e+01, 3.980e+01, 4.008e+01, 4.037e+01, 4.075e+01, 4.103e+01, 4.132e+01, 4.160e+01, 4.189e+01, 4.217e+01, 4.255e+01, 4.274e+01, 4.312e+01, 4.331e+01, 4.369e+01, 4.398e+01, 4.417e+01, 4.455e+01, 4.483e+01, 4.512e+01, 4.540e+01, 4.569e+01, 4.597e+01, 4.616e+01, 4.654e+01, 4.673e+01, 4.692e+01, 4.730e+01, 4.749e+01, 4.768e+01, 4.797e+01, 4.816e+01, 4.835e+01, 4.854e+01, 4.863e+01, 4.882e+01, 4.892e+01, 4.901e+01, 4.911e+01, 4.911e+01, 4.920e+01, 4.920e+01, 4.920e+01, 4.920e+01, 4.911e+01, 4.911e+01, 4.911e+01, 4.892e+01, 4.892e+01, 4.882e+01, 4.863e+01, 4.863e+01, 4.844e+01, 4.825e+01, 4.816e+01, 4.797e+01, 4.778e+01, 4.768e+01, 4.749e+01, 4.730e+01, 4.721e+01, 4.702e+01, 4.683e+01, 4.664e+01, 4.645e+01, 4.626e+01, 4.607e+01, 4.578e+01, 4.559e+01, 4.531e+01, 4.512e+01, 4.493e+01, 4.474e+01, 4.455e+01, 4.436e+01, 4.417e+01, 4.398e+01, 4.379e+01, 4.360e+01, 4.341e+01, 4.322e+01, 4.303e+01, 4.284e+01, 4.265e+01, 4.246e+01, 4.227e+01, 4.208e+01, 4.189e+01, 4.170e+01, 4.151e+01, 4.132e+01, 4.113e+01, 4.094e+01, 4.075e+01, 4.056e+01, 4.037e+01, 4.018e+01, 3.999e+01, 3.980e+01, 3.961e+01, 3.942e+01, 3.923e+01, 3.904e+01, 3.885e+01, 3.875e+01, 3.856e+01, 3.837e+01, 3.818e+01, 3.809e+01, 3.790e+01, 3.771e+01, 3.752e+01, 3.742e+01, 3.723e+01, 3.704e+01, 3.695e+01, 3.676e+01, 3.666e+01, 3.647e+01, 3.628e+01, 3.619e+01, 3.600e+01, 3.591e+01, 3.572e+01, 3.553e+01, 3.543e+01, 3.534e+01, 3.515e+01, 3.496e+01, 3.496e+01, 3.477e+01, 3.458e+01, 3.458e+01, 3.439e+01, 3.420e+01, 3.410e+01, 3.401e+01, 3.382e+01, 3.382e+01, 3.363e+01, 3.344e+01, 3.344e+01, 3.325e+01, 3.306e+01, 3.306e+01, 3.287e+01, 3.277e+01, 3.268e+01, 3.258e+01, 3.249e+01, 3.230e+01, 3.230e+01, 3.211e+01, 3.201e+01, 3.192e+01, 3.182e+01, 3.173e+01, 3.163e+01, 3.154e+01, 3.144e+01, 3.135e+01, 3.125e+01, 3.116e+01, 3.106e+01, 3.097e+01, 3.078e+01, 3.078e+01, 3.059e+01, 3.049e+01, 3.040e+01, 3.030e+01, 3.030e+01, 3.011e+01, 3.011e+01, 3.002e+01, 2.992e+01, 2.983e+01, 2.973e+01, 2.964e+01, 2.954e+01, 2.945e+01, 2.935e+01, 2.935e+01, 2.916e+01, 2.916e+01, 2.916e+01, 2.897e+01, 2.897e+01, 2.878e+01, 2.878e+01, 2.878e+01, 2.859e+01, 2.859e+01, 2.859e+01, 2.840e+01, 2.840e+01, 2.840e+01, 2.821e+01, 2.821e+01, 2.821e+01, 2.802e+01, 2.802e+01, 2.802e+01, 2.783e+01, 2.783e+01, 2.783e+01, 2.774e+01, 2.764e+01, 2.764e+01, 2.764e+01, 2.755e+01, 2.745e+01, 2.745e+01, 2.745e+01, 2.736e+01, 2.726e+01, 2.726e+01, 2.726e+01, 2.717e+01, 2.707e+01, 2.707e+01, 2.707e+01, 2.698e+01, 2.698e+01, 2.688e+01, 2.688e+01, 2.688e+01, 2.679e+01, 2.679e+01, 2.679e+01, 2.669e+01, 2.669e+01, 2.669e+01, 2.660e+01, 2.660e+01, 2.660e+01, 2.650e+01, 2.650e+01, 2.650e+01, 2.641e+01, 2.641e+01, 2.641e+01, 2.641e+01, 2.631e+01, 2.631e+01, 2.631e+01, 2.622e+01, 2.622e+01, 2.622e+01, 2.622e+01, 2.622e+01, 2.612e+01, 2.612e+01, 2.612e+01, 2.603e+01, 2.603e+01, 2.603e+01, 2.603e+01, 2.603e+01, 2.603e+01, 2.603e+01, 2.603e+01, 2.593e+01, 2.593e+01, 2.593e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.584e+01, 2.574e+01, 2.574e+01, 2.574e+01, 2.565e+01, 2.565e+01, 2.565e+01, 2.565e+01, 2.565e+01, 2.565e+01, 2.565e+01, 2.565e+01, 2.565e+01, 2.555e+01, 2.555e+01, 2.555e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.546e+01, 2.536e+01, 2.536e+01, 2.536e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.527e+01, 2.517e+01, 2.517e+01, 2.517e+01, 2.508e+01, 2.508e+01, 2.508e+01, 2.508e+01, 2.508e+01, 2.508e+01, 2.508e+01])    # noqa
_photon_yields[0] = 0    # Zero yields below lowest point
_er_photon_yield_interpolator = InterpolateAndExtrapolate1D(_recoil_energies, _photon_yields)

def er_photon_yield(config, energies):
    check_field(config)
    return _er_photon_yield_interpolator(energies)

def er_electron_yield(config, energies):
    check_field(config)
    return config['base_quanta_yield'] - er_photon_yield(config, energies)


"""
Nuclear recoils

The electron yield / keV for nuclear recoils is called Qy.
It is generally assumed to be field-independent.

The NR photon yield is described by several empirical factors:

    reference_gamma_photon_yield * efield_light_quenching_nr * leff_at_energy(e)

The first is just a reference scale, the second contains the electric field dependence,
the third (leff) the energy dependence.

The Leff below is the best fit to direct measurements we've used in several of our papers.
(I don't know who originally made it, maybe Guillaume,
 since the latest set of measurements these are based on come from his thesis?)

Anyway, I lifted it from Xephyr, where it was loaded in from two arrays "xs1" "ykevnr" using the following code:

    static const double  LightYield = 2.2; // in PE/keVee @ 122 keV (Co57)
    static const double  Se = 0.58;  // field quenching factor for electron recoils
    static const double  Sr = 0.95;  // field quenching factor for nuclear recoils
    leff[i]=xs1[i]/LightYield/Sr*Se/ykevnr[i]

I've called xs1 "_leff_S1" below and ykevnr "_leff_E" below. Why doesn't Xephyr just have the LEff values? Is this some fit to a measurement?
"""


def nr_electron_yield(config, recoil_energies):
    """Qy from Chris' wimpstat, which is apparently taken from some unidentified C code (given semicolons at linebreaks)
    recoil_energies and cutoff_energy are in keV, answer is in number of electrons produced at the interaction point.
    This is apparently a variation on the Bezrukov Qy (looking at RichardW's notes you can see there are many other
    choices which can also be called "Bezrukov").
    """
    cutoff_energy = config['nr_electron_yield_cutoff_energy']
    beyond_cutoff = config['nr_electron_yield_behaviour_below_cutoff']

    if cutoff_energy > 0 and beyond_cutoff == 'const':
        recoil_energies = np.clip(recoil_energies, cutoff_energy, float('inf'))

    ep = recoil_energies * (1.05 * np.power(10.,-3.))
    k = 1.65e-1
    se = k * np.sqrt(ep)
    sn = np.log(1 + 1.1383 * 1.068 * ep)
    sn /= 2 *(1.068 * ep + 0.01321 * np.power((1.068 * ep),0.21226) + 0.19593*np.power((1.068*ep),0.5))
    ratio = 1.09
    g = 0.032
    b = 1.38e5

    squiggle = se / sn;

    Ni = (b * ep * squiggle)/(1 + ratio);
    Nq = (4./g) * np.log(1 + (g * Ni)/4.);

    answer = Nq/recoil_energies

    if cutoff_energy > 0 and beyond_cutoff == 'zero':
        answer[recoil_energies < cutoff_energy] = 0
    return answer


_leff_S1 = np.array([0.4080148448275862, 2.040074224137931, 2.1034373191297937, 2.1702227956547073, 2.240685437519329, 2.3151578510856554, 2.3938725824162077, 2.477204895324311, 2.565468879240414, 2.658998573862932, 2.7581718195752076, 2.863343490810001, 2.9748871078774144, 3.093172419585259, 3.2185616088620694, 3.3514601786068967, 3.4921528623227935, 3.6409590632580016, 3.798173998182604, 3.9639733582080705, 4.138519991828277, 4.321832484595243, 4.5138287651926206, 4.714244667421793, 4.922713854461209, 5.138686464841639, 5.362246819227518, 5.593427181965018, 5.832282328206554, 6.078853447960397, 6.333163442841174, 6.595262424941035, 6.865094675613105, 7.142577355275054, 7.4277447227204165, 7.720466113736467, 8.020682194722243, 8.328255129698485, 8.643127158978363, 8.965104443558811, 9.294133740005174, 9.630082335086744, 9.972792345270397, 10.322397866570487, 10.678710051487691, 11.041920171351986, 11.412235174738276, 11.789953112903488, 12.175551457478656, 12.569787969039934, 12.97366045277121, 13.388439560077249, 13.816037968497072, 14.25857664698045, 14.71902907150614, 15.200685819223798, 15.705849666107586, 16.236042646290315, 16.792684356720347, 17.37758235120145, 17.992344014879226, 18.638774189497763, 19.31878203281628, 20.034036416724575, 20.786522174411743, 21.577830655390294, 22.409732979650695, 23.28393402937914, 24.201781771584628, 25.16476862573414, 26.173531240190176, 27.228765267514163, 28.330620878793287, 29.478617869624195, 30.671397283032, 31.906937131043595, 33.181775266582356, 34.49117580252168, 35.83008352641129, 37.19541810333269, 38.58623483348131, 40.0004335536376, 41.43668115335215, 42.893047769650146, 44.367814747685, 45.859526879618144, 47.36634153898465, 48.8872004605545, 50.42096182722539, 51.96743154662855, 53.52672032001383, 55.099562055648576, 56.688823619937615, 58.29807291535569, 59.93256103371864, 61.60006426154257, 63.31154338164967, 65.08057155946899, 66.92567482694199, 68.86956997111763, 70.94072586206897])  # noqa
_leff_E = np.array([1., 5., 5.153612, 5.311943, 5.475139, 5.643349, 5.816726, 5.99543, 6.179624, 6.369477, 6.565162, 6.76686, 6.974754, 7.189035, 7.4099, 7.63755, 7.872193, 8.114046, 8.363329, 8.620271, 8.885106, 9.158078, 9.439436, 9.729439, 10.02835, 10.336445, 10.654006, 10.981323, 11.318695, 11.666433, 12.024854, 12.394286, 12.775068, 13.167549, 13.572088, 13.989055, 14.418833, 14.861814, 15.318405, 15.789023, 16.2741, 16.774079, 17.289419, 17.820592, 18.368083, 18.932395, 19.514044, 20.113562, 20.731499, 21.368421, 22.02491, 22.701568, 23.399015, 24.117889, 24.858849, 25.622572, 26.40976, 27.221131, 28.05743, 28.919421, 29.807895, 30.723666, 31.667571, 32.640475, 33.643269, 34.676871, 35.742228, 36.840315, 37.972138, 39.138734, 40.34117, 41.580547, 42.858002, 44.174703, 45.531856, 46.930704, 48.372528, 49.858649, 51.390427, 52.969264, 54.596607, 56.273947, 58.002818, 59.784804, 61.621537, 63.514699, 65.466023, 67.477297, 69.550362, 71.687116, 73.889517, 76.159581, 78.499387, 80.911077, 83.39686, 85.959012, 88.59988, 91.321881, 94.127509, 97.019333, 100.])  # noqa
_leff_for_real = _leff_S1 / 2.2 / 0.95 * 0.58 / _leff_E
_leff_for_real[0] = 0   # Constant extrapolation to 0
_leff_log_space_interpolated = InterpolateAndExtrapolate1D(np.log10(_leff_E), _leff_for_real)


def leff_at_energy(es):
    return _leff_log_space_interpolated(np.log10(es))


def nr_photon_yield(config, energies):
    check_field(config)
    return config['reference_gamma_photon_yield'] * config['nr_photon_yield_field_quenching'] * leff_at_energy(energies)
